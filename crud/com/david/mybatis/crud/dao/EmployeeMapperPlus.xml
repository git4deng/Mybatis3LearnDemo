<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 
<mapper namespace="com.david.mybatis.crud.dao.EmployeeMapperPlus">
	<!--自定义结果集映射规则-->
	<!--
		type:自定义规则的java类型
		id:唯一，方便引用
	-->
	<resultMap type="com.david.mybatis.crud.entities.Employee" id="emp">
		<!--主键封装规则
			column:指定对应哪一列
			property:指定JavaBean的哪一个属性
		-->
		<id column="id" property="id"/>
		<!--定义普通列的规则-->
		<result column="last_name" property="lastName"/>
		<!--其它不指定的列，自动封装，推荐只要写resultMap就把所有列都对应起来-->
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
	</resultMap>
	<select id="getEmpById" resultMap="emp">
		select * from david_employee where id=#{id}
	</select>
	
	<!--联合查询方式一：使用级联属性封装-->
	<resultMap type="com.david.mybatis.crud.entities.Employee" id="emp_and_dept_1">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		<result column="did" property="dept.id"/>
		<result column="dept_name" property="dept.departmentName"/>
	</resultMap>
	<!--联合查询方式二：使用嵌套结果集的方式-->
	<resultMap type="com.david.mybatis.crud.entities.Employee" id="emp_and_dept_2">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		<!--association:可以指定联合的JavaBean对象
			property:JavaBean关联的JavaBean的属性名
			javaType:指定关联JavaBean的类型
		-->
		<association property="dept" javaType="com.david.mybatis.crud.entities.Department">
			<id column="did" property="id"/>
			<id column="dept_name" property="departmentName"/>
		</association>
	</resultMap>
	<select id="getEmpAndDeptById" resultMap="emp_and_dept_2">
		select 
			e.id id,
			e.last_name last_name,
			e.email email,
			e.gender gender,
			e.d_id d_id,
			d.id did,
			d.dept_name dept_name
		from david_employee e
		left join david_dept d on e.d_id=d.id
		where e.id=#{id}
	</select>
	<!--联合查询方式三：使用association分步查询
		select:表明当前属性是调用select指定方法查询结果
		column：指定那一列的值传给这个方法
		流程：使用select指定方法（传入column指定的这列参数值）查出对象，并封装给property对应的属性
	-->
	<resultMap type="com.david.mybatis.crud.entities.Employee" id="emp_and_dept_3">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender"/>
		<association property="dept" select="com.david.mybatis.crud.dao.DepartmentMapper.getDeptById"
			column="d_id" fetchType="eager"></association>
	</resultMap>
	<select id="getEmpByIdStep" resultMap="emp_and_dept_4">
		select * from david_employee where id=#{id}
	</select>
	
	<resultMap type="com.david.mybatis.crud.entities.Employee" id="emp_and_dept_4">
		<id column="id" property="id"/>
		<result column="last_name" property="lastName"/>
		<result column="email" property="email"/>
		<result column="gender" property="gender" />
		<!-- 鉴别器：mybatis可以使用discriminator标签判断某列的值，然后根据某列的值改变封装行为
			如果查询的是女生：那么查出部门信息
			如果查询的是男生：那么不要部门信息，并把last_name放入email
			javaType:指定判定的列明
			column：列值对应的java类型
		 -->
		<discriminator javaType="string" column="gender">
			<!--resultType指定封装的类型-->
			<!--女生-->
			<case value="0" resultType="com.david.mybatis.crud.entities.Employee">
				<association property="dept" select="com.david.mybatis.crud.dao.DepartmentMapper.getDeptById"
			column="d_id"></association>
			</case>
			<!--男生-->
			<case value="1" resultType="com.david.mybatis.crud.entities.Employee">
				<result column="last_name" property="email"/>
			</case>
		</discriminator>
	</resultMap>
	
	
	
	<!--依据部门id,查询该部门下的所有的员工信息  -->
	<select id="getEmpsByDid" resultType="com.david.mybatis.crud.entities.Employee">
		select * from david_employee where d_id=#{id}
	</select>
</mapper>