<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
 PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <!-- 
namespace:命名空间;指定为接口的全类名
id：唯一标识
resultType：返回值类型
#{id}：从传递过来的参数中取出id值

public Employee getEmpById(Integer id);
 -->
<mapper namespace="com.david.mybatis.crud.dao.EmployeeMapper">
	<select id="getEmployeeById" resultType="employee">
		select 
			*
		from david_employee
		where 
			id = #{id}
	</select>
	<!-- parameterType可以省略 
	获取自增主键的值：
		mysql支持自增主键，自增主键值的获取，mybatis也是利用statement.getGenreatedKeys()；
		useGeneratedKeys="true"；使用自增主键获取主键值策略
		keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，将这个值封装给javaBean的哪个属性
	-->
	<insert id="addEmp" parameterType="com.david.mybatis.crud.entities.Employee" 
	useGeneratedKeys="true" keyProperty="id">
		insert into 
		david_employee (last_name,email,gender) 
		values (#{lastName},#{email},#{gender})
	</insert>
	
	<!-- 
	获取非自增主键的值：
		Oracle不支持自增；Oracle使用序列来模拟自增；
		每次插入的数据的主键是从序列中拿到的值；如何获取到这个值；
	 -->
	<insert id="addEmp" databaseId="oracle">
		<!-- 
		keyProperty:查出的主键值封装给javaBean的哪个属性
		order="BEFORE":当前sql在插入sql之前运行
			   AFTER：当前sql在插入sql之后运行
		resultType:查出的数据的返回值类型
		
		BEFORE运行顺序：
			先运行selectKey查询id的sql；查出id值封装给javaBean的id属性
			在运行插入的sql；就可以取出id属性对应的值
		AFTER运行顺序：
			先运行插入的sql（从序列中取出新值作为id）；
			再运行selectKey查询id的sql；
		 -->
		<selectKey keyProperty="id" order="BEFORE" resultType="Integer">
			<!-- 编写查询主键的sql语句 -->
			<!-- BEFORE-->
			select EMPLOYEES_SEQ.nextval from dual 
			<!-- AFTER：
			 select EMPLOYEES_SEQ.currval from dual -->
		</selectKey>
		
		<!-- 插入时的主键是从序列中拿到的 -->
		<!-- BEFORE:-->
		insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL) 
		values(#{id},#{lastName},#{email<!-- ,jdbcType=NULL -->}) 
		<!-- AFTER：
		insert into employees(EMPLOYEE_ID,LAST_NAME,EMAIL) 
		values(employees_seq.nextval,#{lastName},#{email}) -->
	</insert>
	<!--增加方法带返回值的-->
	<insert id="addEmployee" parameterType="com.david.mybatis.crud.entities.Employee">
		insert into 
		david_employee (last_name,email,gender) 
		values (#{lastName},#{email},#{gender})
	</insert>
	
	<update id="updateEmp" parameterType="com.david.mybatis.crud.entities.Employee">
		update david_employee
		set
			last_name=#{lastName},
			email=#{email},
			gender=#{gender}
		where 
			id=#{id}
	</update>
	
	<delete id="deleteEmpById">
		delete from david_employee where id=#{id}
	</delete>
	
	<!--多个参数查询-->
	<select id="getEmployeeByIdAndLastName" resultType="employee">
		select 
			*
		from david_employee
		where 
			id = #{id}
		and
			last_name=#{lastName}
	</select>
	<!--参数存入map中-->
	<select id="getEmployeeByMap" resultType="employee">
		select 
			*
		from david_employee
		where 
			id = #{id}
		and
			last_name=#{lastName}
	</select>
	
	
</mapper>